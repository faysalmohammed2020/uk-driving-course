generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String?
  emailVerified Boolean
  role          String?
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      sessions[]
  accounts      accounts[]
}

model sessions {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  role      String?
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model accounts {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  role                  String?
  userId                String
  user                  users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
}

model verifications {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model ExamResult {
  id        Int      @id @default(autoincrement())
  userId    String // Ensure this is NOT nullable if it's required
  examId    Int
  examTitle String?
  score     Int
  total     Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
